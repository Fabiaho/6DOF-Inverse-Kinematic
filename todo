# Todos
- Tutorial durcharbeiten.
- Shell script which will set up the UR5 (maybe this will be managed by dependencies???)
- Makefile schreiben 

# Notes:
- For IK there are two approaches - The analytical and the numeric way
  - We have to go with the numeric way because:
    - In the numeric method, we try to move the joint configuration (angles) step by step to approach the desired goal position for our tcp. Therefore, we try to reduce an error function. In our case, we want to minimize the error between our current tcp pose and the desired tcp pose.
    - We can reduce this error using an ML/Dl methode




# Notes/Sources:
- Tutorial series: https://roboticscasual.com/robotics-tutorials/
- Tutorial: https://roboticscasual.com/tutorial-controlling-tcp-position-of-the-ur5-robot-with-kdl-in-c-inverse-kinematics/
- Inverse Kinematics with UR5: https://github.com/mcarfagno/robot_arm_pick_and_place/blob/master/jupiter_notebooks/InverseKinematicsUR5.ipynb
  - YT Video: https://www.youtube.com/watch?v=O0aZ0XFEYbU
  - YT Video: https://www.youtube.com/watch?v=DzKHEtwAOLU | https://github.com/caiobarrosv/ur5_isaac_simulation
- Source: https://roboticseabass.com/2024/06/30/how-do-robot-manipulators-move/
- Python Universal Robot Kinematics: https://github.com/mc-capolei/python-Universal-robot-kinematics/tree/master
- UR IKFast Library: https://github.com/cambel/ur_ikfast

# Inverse kinematics Deeplearning solution:
- Reinforcement Learning: https://www.nature.com/articles/s41598-024-62948-6
- Deep learning aooriaches: https://www.sciencedirect.com/science/article/abs/pii/S0952197623004852
- Gizhub: https://github.com/StefanBorkovski/An-ML-based-approach-for-solving-inverse-kinematic-of-a-6DOF-robotic-arm
- YT Video: https://www.youtube.com/watch?v=5FD9jyy5eek